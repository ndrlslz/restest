api:
  name: test api
  endpoint: http://localhost
  port: 8080

scenarios:
  - name: test contains function
    method: GET
    path: /shops
    expect:
      body:
        data.id: contains(4, 3, 2, 1)
        data.name: contains(name1, name2, name3, name4)
    variables:
      shopId: data[0].id
      shopId2: data.find { it.name == "name2" }.id
      shopName: data[1].name

  - name: test contains function with variables
    method: GET
    path: /shops
    expect:
      body:
        data.id: contains(4, 3, ${shopId2}, ${shopId})
        data.name: contains(name1, ${shopName}, name3, name4)

  - name: test hasItems function
    method: GET
    path: /shops
    expect:
      body:
        data.id: hasItems(1, 3)
        data.name: hasItems(name2, name4, name3)

  - name: test hasItems function with variables
    method: GET
    path: /shops
    expect:
      body:
        data.id: hasItems(${shopId}, ${shopId2})
        data.name: hasItems(${shopName})

  - name: test greaterThan function
    method: GET
    path: /shops
    expect:
      body:
        data.find { it.name == "${shopName}" }.id: greaterThan(1)
        data.find { it.name == "name2" }.id: greaterThan(1)

  - name: test greaterThan function with variables
    method: GET
    path: /shops
    expect:
      body:
        data.find { it.name == "${shopName}" }.id: greaterThan(${shopId})
        data.find { it.name == "name2" }.id: greaterThan(${shopId})

  - name: test lessThan function
    method: GET
    path: /shops
    expect:
      body:
        data.find { it.name == "${shopName}" }.id: lessThan(10)
        data.find { it.name == "name2" }.id: lessThan(3)

  - name: test startsWith function
    path: /shops/1/orders
    expect:
      body:
        data[0].vehicle: startsWith(ben)
        data[1].price: startsWith(10)
        data[2].vehicle: startsWith(this_is_)

  - name: test endsWith function
    path: /shops/1/orders
    expect:
      body:
        data[0].vehicle: endsWith(z)
        data[2].price: endsWith(123)
        data[2].vehicle: endsWith(car2)

  - name: test containsString function
    path: /shops/1/orders
    expect:
      body:
        data[0].shopName: containsString(ame)
        data[1].price: containsString(10)

  - name: test isEmptyOrNullString function
    path: /shops/1/orders
    expect:
      body:
        notExists: isEmptyOrNullString()

  - name: test anything function
    path: /shops/1/orders
    expect:
      body:
        data.anything: anything()