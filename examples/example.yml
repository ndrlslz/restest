api:
  name: test api
  endpoint: http://localhost
  port: 8080

scenarios:
  - name: test minimal definition
    path: /shops

  - name: test retrieve shops
    method: GET
    path: /shops
    headers:
      Accept: application/json
    expect:
      status: 200
      headers:
        Content-Type: application/json
      body:
        data.size(): 4
        data[0].id: 1
        data[0].name: name1
        data.find { it.name == "name2" }.id: 2
        data.id: contains(1, 2, 3)
    variables:
      shopId: data[0].id
      shopId2: data.find { it.name == "name2" }.id
      shopName: data[1].name

  - name: test response body with variables
    method: GET
    path: /shops
    headers:
      Accept: application/json
    expect:
      status: 200
      headers:
        Content-Type: application/json
      body:
        data.find { it.name == "${shopName}" }.id: 2

  - name: test function
    method: GET
    path: /shops
    expect:
      status: 200
      body:
        data.find { it.name == "name2" }.id: greaterThan(1)
        data.id: contains(1, 2, 3)
        data.name: hasItems(name1)

  - name: retrieve orders
    method: GET
    path: /shops/1/orders
    headers:
      contentType: application/json
    expect:
      status: 200
      body:
        data[0].price: 99
        data[0].vehicle: benz
        data.size(): 4

  - name: create orders
    method: POST
    path: /shops/1/orders
    headers:
      Content-Type: application/json
    body: >
      {
        "vehicle": "benz",
        "price": 888,
        "id": 1
      }
    expect:
      status: 200
      body:
        vehicle: benz
        price: 888

  - name: create orders with variables in path, body and response body
    method: POST
    path: /shops/${shopId}/orders
    headers:
      Content-Type: application/json
    body: >
      {
        "vehicle": "benz",
        "price": 888,
        "id": ${shopId}
      }
    expect:
      status: 200
      body:
        vehicle: benz
        price: 888
        shopId: ${shopId}
